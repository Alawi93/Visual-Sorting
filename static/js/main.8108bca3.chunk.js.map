{"version":3,"sources":["visualize/Visualize.jsx","visualize/node/Node.jsx","App.js","index.js"],"names":["totalData","nodeWidth","currentNode","Node","this","props","value","width","typeClass","isSorted","nodeStyle","height","id","className","style","Component","randomNumbers","stop","Visualize","state","dataArray","setState","getDataArray","stateArray","len","length","swapped","i","document","getElementById","classList","add","waitUntil","tmp","remove","animateSorted","j","minIdx","temp","key","arr","sorted","Array","from","buffer","size","leftStart","left","right","Math","min","leftLimit","rightLimit","merge","array","Promise","resolve","interval","setInterval","clearInterval","window","location","reload","onClick","mergeSort","insertionSort","selectionSort","bubbleSort","bubbleSortEfficient","start","reset","map","node","index","getUniquNumber","setDataArray","r","floor","random","indexOf","push","createData","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.8108bca3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Visualize.css';\r\nimport Node from './node/Node';\r\n\r\n/*===================\r\n  === Algorithms ===\r\n  ==================\r\n*/\r\n\r\nconst randomNumbers = [];\r\nvar totalData;\r\nvar nodeWidth; // May remove later\r\n\r\n//used for start - stop\r\nvar stop = false;\r\n\r\n// TO BE WORKED ON //\r\nvar currentNode;\r\nvar animation_speed = 60;\r\n// var mergeSortAnimateWinner = [];\r\n// var mergeSortAnimateLoser = [];\r\n// var saveArray = [];\r\nexport default class Visualize extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            dataArray: [],\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        //starts with 10 values (for now)\r\n        totalData = 50\r\n        //sets width to state value\r\n        nodeWidth = 35;\r\n        this.setState({dataArray: getDataArray()}); \r\n    }\r\n\r\n   // To be used later\r\n    addMore(){\r\n        totalData = totalData + 1;\r\n        //sets width to state value\r\n        nodeWidth = this.state.nodeWidth;  \r\n        this.setState({dataArray: getDataArray()});\r\n    }\r\n\r\n    // ========= Efficient Bubble Sort =========\r\n    async bubbleSortEfficient(){\r\n      const stateArray = this.state.dataArray\r\n        let len = stateArray.length;\r\n        let swapped;\r\n\r\n        do {\r\n            swapped = false;\r\n            for (let i = 0; i < len-1; i++) {\r\n                currentNode = stateArray[i].value;\r\n            document.getElementById(`node-${stateArray[i].value}`).classList.add('chosen');\r\n            document.getElementById(`node-${stateArray[i+1].value}`).classList.add('chosen');\r\n            //Stoping and starting animation\r\n            await this.waitUntil()\r\n                if (stateArray[i].value > stateArray[i + 1].value) { \r\n                    let tmp = stateArray[i];\r\n                    stateArray[i] = stateArray[i + 1];\r\n                    stateArray[i + 1] = tmp;\r\n                    swapped = true;\r\n                this.setState({dataArray: stateArray})  \r\n                }\r\n            document.getElementById(`node-${stateArray[i].value}`).classList.remove('chosen');\r\n            document.getElementById(`node-${stateArray[i+1].value}`).classList.remove('chosen');\r\n        }\r\n      } while (swapped);\r\n       //Animate sorted\r\n  this.animateSorted(stateArray)    \r\n  }\r\n\r\n // ========= BubbleSort =========\r\n  async bubbleSort(){\r\n    const stateArray= this.state.dataArray;\r\n    let len = stateArray.length -1;\r\n\r\n    for (let i = 0; i < len; i++) {\r\n        for (let j = 0; j < len; j++) {\r\n            currentNode = stateArray[j].value;\r\n            document.getElementById(`node-${stateArray[j].value}`).classList.add('chosen');\r\n            document.getElementById(`node-${stateArray[j+1].value}`).classList.add('chosen');\r\n            //used for speed of animation and for stop and start              \r\n            await this.waitUntil()\r\n            if (stateArray[j].value > stateArray[j + 1].value) {\r\n                let tmp = stateArray[j];\r\n                stateArray[j] = stateArray[j + 1];\r\n                stateArray[j + 1] = tmp;\r\n                this.setState({dataArray: stateArray})  \r\n            }\r\n            document.getElementById(`node-${stateArray[j].value}`).classList.remove('chosen');\r\n            document.getElementById(`node-${stateArray[j+1].value}`).classList.remove('chosen');\r\n        }\r\n    }\r\n     //Animate sorted\r\n  this.animateSorted(stateArray);\r\n};\r\n\r\n// ========= Selection sort =========\r\nasync selectionSort(){\r\n    var stateArray = this.state.dataArray\r\n    var minIdx, temp, \r\n        len = stateArray.length;\r\n\r\n    for(var i = 0; i < len; i++){\r\n      //used for speed of animation and for stop and start              \r\n      minIdx = i;\r\n      currentNode = stateArray[minIdx].value;\r\n      await this.waitUntil()\r\n      for(var  j = i+1; j<len; j++){\r\n        currentNode = stateArray[minIdx].value;\r\n        document.getElementById(`node-${stateArray[minIdx].value}`).classList.add('chosen');\r\n        document.getElementById(`node-${stateArray[j].value}`).classList.add('chosen');\r\n        await this.waitUntil()\r\n        //current\r\n         if(stateArray[j].value<stateArray[minIdx].value){\r\n            document.getElementById(`node-${stateArray[minIdx].value}`).classList.remove('chosen');\r\n            minIdx = j;\r\n            currentNode = stateArray[minIdx].value;\r\n            document.getElementById(`node-${stateArray[minIdx].value}`).classList.add('chosen');\r\n         }\r\n         document.getElementById(`node-${stateArray[j].value}`).classList.remove('chosen');\r\n      }\r\n      temp = stateArray[i];\r\n      stateArray[i] = stateArray[minIdx];\r\n      stateArray[minIdx] = temp;\r\n      this.setState({dataArray: stateArray})  \r\n      document.getElementById(`node-${stateArray[minIdx].value}`).classList.remove('chosen');\r\n      document.getElementById(`node-${stateArray[i].value}`).classList.remove('chosen');\r\n    }\r\n  //Animate sorted\r\n  this.animateSorted(stateArray)\r\n  }\r\n\r\n // ========= Insertion sort =========\r\n async insertionSort(){\r\n     var stateArray = this.state.dataArray;\r\n      let len = stateArray.length;\r\n\r\n    for (let i = 1; i < len; i++) {\r\n        await this.waitUntil()\r\n        let key = stateArray[i].value;\r\n        document.getElementById(`node-${key}`).classList.add('chosen');\r\n        let j = i - 1;\r\n        while (j >= 0 && stateArray[j].value > key) {\r\n            await this.waitUntil()\r\n            document.getElementById(`node-${stateArray[j + 1].value}`).classList.remove('chosen1');\r\n            stateArray[j + 1].value = stateArray[j].value;\r\n            j = j - 1;\r\n            document.getElementById(`node-${stateArray[j + 1].value}`).classList.add('chosen1');\r\n        }\r\n        document.getElementById(`node-${key}`).classList.remove('chosen');\r\n        stateArray[j + 1].value = key;\r\n        this.setState({dataArray: stateArray})  \r\n    }\r\n    //Animate sorted\r\n  this.animateSorted(stateArray)\r\n  }\r\n\r\n// ========= MERGESORT ========= \r\nasync mergeSort(arr){\r\n    //Create two arrays for sorting\r\n    let sorted = Array.from(arr);\r\n    let len = sorted.length;\r\n    let buffer = new Array(len);\r\n\r\n    for (let size = 1; size < len; size *= 2) {\r\n      for (let leftStart = 0; leftStart < len; leftStart += 2*size) {\r\n        //Get the two sub arrays\r\n        let left = leftStart,\r\n            right = Math.min(left + size, len),\r\n            leftLimit = right,\r\n            rightLimit = Math.min(right + size, len);\r\n\r\n       //Merge the sub arrays\r\n       await this.merge(left, right, leftLimit, rightLimit, sorted, buffer); \r\n      }\r\n\r\n      //Swap the sorted sub array and merge them\r\n      let temp = sorted;\r\n      sorted = buffer;\r\n      buffer = temp;\r\n      this.setState({dataArray: sorted})\r\n\r\n    }\r\n    this.setState({dataArray: sorted})\r\n  }\r\n\r\n  async merge (left, right, leftLimit, rightLimit, sorted, buffer){\r\n    let i = left;\r\n    //Compare the two sub arrays and merge them in the sorted order\r\n    while (left < leftLimit && right < rightLimit) {\r\n      await this.waitUntil()\r\n    document.getElementById(`node-${sorted[i].value}`).classList.add('chosen1');\r\n    //document.getElementById(`node-${sorted[right].value}`).classList.add('chosen1');\r\n\r\n      if (sorted[left].value <= sorted[right].value) {\r\n        buffer[i++] = sorted[left++];\r\n      } else {\r\n        buffer[i++] = sorted[right++];\r\n      }\r\n      this.setState({dataArray: sorted})\r\n\r\n      \r\n      document.getElementById(`node-${sorted[i].value}`).classList.remove('chosen1');\r\n     //document.getElementById(`node-${sorted[right].value}`).classList.remove('chosen1');\r\n    }\r\n    document.getElementById(`node-${sorted[i].value}`).classList.remove('chosen1');\r\n\r\n    //If there are elements in the left sub arrray then add it to the result\r\n    while (left < leftLimit) {\r\n      buffer[i++] = sorted[left++];\r\n    }\r\n  \r\n    //If there are elements in the right sub array then add it to the result\r\n    while (right < rightLimit) {\r\n      buffer[i++] = sorted[right++];     \r\n    }\r\n  \r\n  }\r\n  \r\n  // ========= Visual animation =========\r\n  async animateSorted(array){\r\n    for (let i = 0; i < array.length; i++) {\r\n        if(document.getElementById(`node-${array[i].value}`).classList === 'node chosen1'){\r\n            document.getElementById(`node-${array[i].value}`).classList.remove('chosen1')\r\n        }\r\n     await this.waitUntil()\r\n     document.getElementById(`node-${array[i].value}`).classList.add('sorted');\r\n    }\r\n  }\r\n   // used for animation speed and for stop/start function \r\n   waitUntil(){\r\n    return new Promise((resolve) => {\r\n        let interval = setInterval(() => {\r\n            if (stop) {\r\n                return\r\n            }\r\n            clearInterval(interval)\r\n            resolve()\r\n        }, animation_speed)\r\n    })\r\n} \r\n\r\n// ========= Resetting: to be worked on =========\r\nasync reset(){\r\n  window.location.reload();\r\n    /*\r\n    this.setState({dataArray: getDataArray()}); \r\n    var stateArray = this.state.dataArray;\r\n    //removes a class = removes animation color\r\n    for (let i = 0; i< stateArray.length; i++) {\r\n        await this.waitUntil()\r\n        document.getElementById(`node-${stateArray[i].value}`).classList.remove('sorted');\r\n       }\r\n       */\r\n\r\n}\r\n//TODO: change to one button\r\nstop(){\r\nstop = true;\r\n}\r\nstart(){\r\nstop = false;\r\n}\r\n    render() {\r\n        const {dataArray} = this.state;\r\n        return (\r\n            <>\r\n            <button  onClick={() => this.mergeSort(this.state.dataArray)}>Merge Sort test</button>  \r\n\r\n            <button  onClick={() => this.insertionSort()}>Insertion Sort</button>  \r\n            <button  onClick={() => this.selectionSort()}>Selection Sort</button>  \r\n            <button  onClick={() => this.bubbleSort()}>Bubble Sort </button>  \r\n            <button  onClick={() => this.bubbleSortEfficient()}>Bubble Sort - efficient </button>  \r\n            <button  onClick={() => this.stop()}>Stop</button>  \r\n            <button  onClick={() => this.start()}>Start</button>  \r\n            <button  onClick={() => this.reset()}>Reset</button>  \r\n             {/*Shows current node beeing compared against*/}\r\n            {currentNode}\r\n\r\n            <div className=\"layout\">\r\n            {dataArray.map((node,index)=>{\r\n            const {value,width,isSorted} = node\r\n            return(\r\n            <Node \r\n            key={index}\r\n            value={value} \r\n            width={width} \r\n            isSorted={isSorted}>\r\n            </Node> \r\n            )\r\n              })}\r\n            </div>\r\n           </>\r\n        )\r\n    }\r\n}\r\n\r\n//-----------------------------------\r\nconst getDataArray = () =>{\r\n    //Fills an array with unique numbers\r\n    getUniquNumber();\r\n    //Sets global array with data\r\n   return setDataArray();\r\n}\r\n//generates unique numbers (no duplicates)\r\nconst getUniquNumber = () =>{\r\n    while(randomNumbers.length < totalData){\r\n        var r = Math.floor(Math.random() * 1000) + 1;\r\n        if(randomNumbers.indexOf(r)=== -1){\r\n            randomNumbers.push(r);\r\n        }\r\n    }\r\n}\r\n//sets global state data\r\nconst setDataArray = () =>{\r\n    const array = [];\r\n    for (let i = 0; i < totalData; i++) {  \r\n       array.push(createData(i)) \r\n    }\r\n    //sets global value to generated array\r\n    return array;\r\n}\r\n//creates objects of data\r\nconst createData = (i) =>{\r\n    return {\r\n        value:randomNumbers[i], \r\n        width: nodeWidth,\r\n        isSorted: false,\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport './Node.css';\r\nexport default class Node extends Component {\r\n    render() {\r\n        const {\r\n            value,\r\n            width,\r\n            isSorted,\r\n        } = this.props;\r\n\r\n    const typeClass = isSorted?'isSorted':\"\";\r\n       \r\n    const nodeStyle = {\r\n        height: value,\r\n        width: width,\r\n      };\r\n        return (\r\n            <div\r\n            id={`node-${value}`}\r\n            className={`node ${typeClass}`}\r\n            style={nodeStyle}\r\n            >\r\n            {value}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport Visualize from './visualize/Visualize';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualize value='30' width='30'/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n\n"],"sourceRoot":""}